/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as mainIndexImport } from "./routes/(main)/index";
import { Route as mainEditImport } from "./routes/(main)/edit";
import { Route as mainCreateImport } from "./routes/(main)/create";
import { Route as authAuthImport } from "./routes/(auth)/auth";

// Create/Update Routes

const mainIndexRoute = mainIndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const mainEditRoute = mainEditImport.update({
  path: "/edit",
  getParentRoute: () => rootRoute,
} as any);

const mainCreateRoute = mainCreateImport.update({
  path: "/create",
  getParentRoute: () => rootRoute,
} as any);

const authAuthRoute = authAuthImport.update({
  path: "/auth",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/(auth)/auth": {
      id: "/auth";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof authAuthImport;
      parentRoute: typeof rootRoute;
    };
    "/(main)/create": {
      id: "/create";
      path: "/create";
      fullPath: "/create";
      preLoaderRoute: typeof mainCreateImport;
      parentRoute: typeof rootRoute;
    };
    "/(main)/edit": {
      id: "/edit";
      path: "/edit";
      fullPath: "/edit";
      preLoaderRoute: typeof mainEditImport;
      parentRoute: typeof rootRoute;
    };
    "/(main)/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof mainIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/auth": typeof authAuthRoute;
  "/create": typeof mainCreateRoute;
  "/edit": typeof mainEditRoute;
  "/": typeof mainIndexRoute;
}

export interface FileRoutesByTo {
  "/auth": typeof authAuthRoute;
  "/create": typeof mainCreateRoute;
  "/edit": typeof mainEditRoute;
  "/": typeof mainIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/auth": typeof authAuthRoute;
  "/create": typeof mainCreateRoute;
  "/edit": typeof mainEditRoute;
  "/": typeof mainIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/auth" | "/create" | "/edit" | "/";
  fileRoutesByTo: FileRoutesByTo;
  to: "/auth" | "/create" | "/edit" | "/";
  id: "__root__" | "/auth" | "/create" | "/edit" | "/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  authAuthRoute: typeof authAuthRoute;
  mainCreateRoute: typeof mainCreateRoute;
  mainEditRoute: typeof mainEditRoute;
  mainIndexRoute: typeof mainIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  authAuthRoute: authAuthRoute,
  mainCreateRoute: mainCreateRoute,
  mainEditRoute: mainEditRoute,
  mainIndexRoute: mainIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/auth",
        "/create",
        "/edit",
        "/"
      ]
    },
    "/auth": {
      "filePath": "(auth)/auth.tsx"
    },
    "/create": {
      "filePath": "(main)/create.tsx"
    },
    "/edit": {
      "filePath": "(main)/edit.tsx"
    },
    "/": {
      "filePath": "(main)/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
